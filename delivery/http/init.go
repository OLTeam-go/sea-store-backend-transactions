package http

import (
	dTransactions "github.com/OLTeam-go/sea-store-backend-transactions/delivery"
	_ "github.com/OLTeam-go/sea-store-backend-transactions/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/OLTeam-go/sea-store-backend-transactions/domain"
	"github.com/labstack/echo/v4"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	echoSwagger "github.com/swaggo/echo-swagger"
)

type httpDelivery struct {
	bankUsecase        domain.BankUsecase
	cartUsecase        domain.CartUsecase
	cartItemUsecase    domain.CartItemUsecase
	transactionUsecase domain.TransactionUsecase
}

func transactionGroup(e *echo.Echo, h *httpDelivery) {
	tGroup := e.Group("/api/transaction")
	e.GET("/api/transactions", h.FetchTransactions)
	tGroup.POST("/accept/:transaction_id", h.AcceptTransaction)
	tGroup.POST("/reject/:transaction_id", h.RejectTransaction)
	tGroup.POST("/checkout/:customer_id", h.CheckoutCart)
}

func cartGroup(e *echo.Echo, h *httpDelivery) {
	cart := e.Group("/api/cart")
	cart.GET("/customer/:id", h.GetActiveCartByCustomerID)
	cart.POST("/customer/add/:id", h.AddItemToCart)
	cart.POST("/customer/remove/:id", h.RemoveItemFromCart)
	cart.GET("/customer/history/:id", h.FetchCartHistoryByCustomerID)
}

func apiGroup(e *echo.Echo, h *httpDelivery) {
	api := e.Group("/api")
	api.GET("/banks", h.FetchBanks)
	api.GET("/docs/*", echoSwagger.WrapHandler)
	api.GET("/metrics", echo.WrapHandler(promhttp.Handler()))
	cartGroup(e, h)
	transactionGroup(e, h)
}

// New function intialize delivery implementation
func New(e *echo.Echo, u domain.AvailableUsecase) dTransactions.Delivery {
	handler := &httpDelivery{
		bankUsecase:        u.BankUsecase,
		cartUsecase:        u.CartUsecase,
		cartItemUsecase:    u.CartItemUsecase,
		transactionUsecase: u.TransactionUsecase,
	}
	e.GET("/", handler.Hello)
	apiGroup(e, handler)
	return handler
}
