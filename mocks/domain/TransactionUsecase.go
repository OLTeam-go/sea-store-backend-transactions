// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	enum "github.com/OLTeam-go/sea-store-backend-transactions/enum"

	mock "github.com/stretchr/testify/mock"

	models "github.com/OLTeam-go/sea-store-backend-transactions/models"

	uuid "github.com/google/uuid"
)

// TransactionUsecase is an autogenerated mock type for the TransactionUsecase type
type TransactionUsecase struct {
	mock.Mock
}

// AcceptStatusTransaction provides a mock function with given fields: c, id
func (_m *TransactionUsecase) AcceptStatusTransaction(c context.Context, id uuid.UUID) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: c, customerID, bankID, bankAccountNumber
func (_m *TransactionUsecase) CreateTransaction(c context.Context, customerID uuid.UUID, bankID uuid.UUID, bankAccountNumber string) (*models.Transaction, error) {
	ret := _m.Called(c, customerID, bankID, bankAccountNumber)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) *models.Transaction); ok {
		r0 = rf(c, customerID, bankID, bankAccountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = rf(c, customerID, bankID, bankAccountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTransactions provides a mock function with given fields: c, page, status
func (_m *TransactionUsecase) FetchTransactions(c context.Context, page int, status enum.TransactionFilterStatus) ([]*models.Transaction, error) {
	ret := _m.Called(c, page, status)

	var r0 []*models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int, enum.TransactionFilterStatus) []*models.Transaction); ok {
		r0 = rf(c, page, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, enum.TransactionFilterStatus) error); ok {
		r1 = rf(c, page, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectStatusTransaction provides a mock function with given fields: c, id
func (_m *TransactionUsecase) RejectStatusTransaction(c context.Context, id uuid.UUID) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
