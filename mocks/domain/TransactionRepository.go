// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	enum "github.com/OLTeam-go/sea-store-backend-transactions/enum"

	mock "github.com/stretchr/testify/mock"

	models "github.com/OLTeam-go/sea-store-backend-transactions/models"

	uuid "github.com/google/uuid"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: c, t
func (_m *TransactionRepository) CreateTransaction(c context.Context, t models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(c, t)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, models.Transaction) *models.Transaction); ok {
		r0 = rf(c, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Transaction) error); ok {
		r1 = rf(c, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTransactions provides a mock function with given fields: c, page, status
func (_m *TransactionRepository) FetchTransactions(c context.Context, page int, status []enum.TransactionStatus) ([]*models.Transaction, error) {
	ret := _m.Called(c, page, status)

	var r0 []*models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int, []enum.TransactionStatus) []*models.Transaction); ok {
		r0 = rf(c, page, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, []enum.TransactionStatus) error); ok {
		r1 = rf(c, page, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *TransactionRepository) GetByID(c context.Context, id uuid.UUID) (*models.Transaction, error) {
	ret := _m.Called(c, id)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Transaction); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusTransaction provides a mock function with given fields: c, id, s
func (_m *TransactionRepository) UpdateStatusTransaction(c context.Context, id uuid.UUID, s enum.TransactionStatus) error {
	ret := _m.Called(c, id, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, enum.TransactionStatus) error); ok {
		r0 = rf(c, id, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
